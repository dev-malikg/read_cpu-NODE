<% for( let i = 1; i < 0; i++ ) { %>
                <%  const data = { username: 'example' }; %>
                <% fetch('/', { method: 'POST', headers: {'Content-Type': 'application/json',}, body: JSON.stringify(data),}).then((response) => response.json()).then((data) => {console.log('Success:', data);}).catch((error) => {console.error('Error:', error);}); %>
                <% setTimeout(function(){ console.log(" a ") }, 500); %>
                <div class="child"> root </div>
            <% } %>




            <% for( let index = 0; index <= 5; index++ ) { %> 
                <% const data = { username: 'example' }; %>
                <% fetch('/', { method: 'POST', headers: {'Content-Type': 'application/json',}, body: JSON.stringify(data),}).then((response) => response.json()).then((data) => {console.log('Success:', data);}).catch((error) => {console.error('Error:', error);}); %>
                <% console.log("goo") %>               
                <div class="child">root</div>
            <% } %>








            function addRow() {
                let table = document.getElementById("q_table");
                let row = table.insertRow(0);
                let cell1 = row.insertCell(0);
                let cell2 = row.insertCell(1);
                let cell3 = row.insertCell(2);
                let cell4 = row.insertCell(3);
                let cell5 = row.insertCell(4);
                let cell6 = row.insertCell(5);
                let cell7 = row.insertCell(6);
                let cell8 = row.insertCell(7);
                cell1.innerHTML = "value";
                cell2.innerHTML = "result";
                cell3.innerHTML = "result";
                cell4.innerHTML = "result";
                cell5.innerHTML = "result";
                cell6.innerHTML = "result";
                cell7.innerHTML = "result";
                cell8.innerHTML = "result";
            }
    
            addRow();




    await sleep(1000);
    res.send({c1: [c, (c+1), (c+10)]})
    c++




    import psutil
 
    per_cpu = psutil.cpu_percent(interval=0.1, percpu=True)
    # For individual core usage with blocking, psutil.cpu_percent(interval=1, percpu=True)
    for idx, usage in enumerate(per_cpu): # type: ignore
        print(f"CORE_{idx+1}: {usage}%")
    